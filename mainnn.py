# main.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –° –£–ú–ù–´–ú –†–ê–ó–†–ï–ó–ê–ù–ò–ï–ú –ò –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–ï–ú)
import logging
import asyncio
import re
from telegram import Update, constants
from telegram.error import BadRequest
from telegram.ext import (
    Application,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)

from src.dialogue.dialogue_manager import DialogueManager
from src.config import settings, setup_logging_globally

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
setup_logging_globally()
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)
dialogue_manager = DialogueManager()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown V2, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥.
    """
    # \ –¥–æ–ª–∂–µ–Ω —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–≤—ã–º
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–±–æ–≥–æ –∏–∑ —ç—Ç–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)


async def send_long_message(
    update: Update, context: ContextTypes.DEFAULT_TYPE, text: str
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞–∑—Ä–µ–∑–∞—è –µ–≥–æ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É—è Markdown.
    """
    MAX_LENGTH = constants.MessageLimit.MAX_TEXT_LENGTH
    
    # –°—Ä–∞–∑—É —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç. –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ GigaChat –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Markdown.
    # –ï—Å–ª–∏ –±—ã –≤—ã —Å–∞–º–∏ –≤—Å—Ç–∞–≤–ª—è–ª–∏ *–∂–∏—Ä–Ω—ã–π* —Ç–µ–∫—Å—Ç, —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–æ-–¥—Ä—É–≥–æ–º—É.
    safe_text = escape_markdown(text)
    
    if len(safe_text) <= MAX_LENGTH:
        try:
            await update.message.reply_text(safe_text, parse_mode=constants.ParseMode.MARKDOWN_V2)
        except BadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}. –¢–µ–∫—Å—Ç: {safe_text[:200]}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            await update.message.reply_text("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏:\n\n" + text)
        return

    parts = []
    while len(safe_text) > 0:
        # –ï—Å–ª–∏ –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∏ –≤—ã—Ö–æ–¥–∏–º
        if len(safe_text) <= MAX_LENGTH:
            parts.append(safe_text)
            break

        # –ò—â–µ–º –ª—É—á—à–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞, –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –ø–æ –¥–≤–æ–π–Ω–æ–º—É –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏
        cut_off = safe_text.rfind("\n\n", 0, MAX_LENGTH)
        if cut_off == -1:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å, –∏—â–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–π
            cut_off = safe_text.rfind("\n", 0, MAX_LENGTH)
        
        if cut_off == -1:
            # –ï—Å–ª–∏ –¥–∞–∂–µ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –Ω–µ—Ç, —Ä–µ–∂–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø—Ä–æ–±–µ–ª—É
            cut_off = safe_text.rfind(" ", 0, MAX_LENGTH)

        if cut_off == -1:
            # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ, —Ä–µ–∂–µ–º –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ
            cut_off = MAX_LENGTH

        parts.append(safe_text[:cut_off])
        safe_text = safe_text[cut_off:].lstrip()

    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π.")
    for i, part in enumerate(parts):
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=part,
                parse_mode=constants.ParseMode.MARKDOWN_V2,
            )
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
            if i < len(parts) - 1:
                await asyncio.sleep(0.5)
        except BadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i+1}/{len(parts)}: {e}. –¢–µ–∫—Å—Ç —á–∞—Å—Ç–∏: {part[:200]}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é —á–∞—Å—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —ç—Ç–æ–π —á–∞—Å—Ç–∏. –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ –µ—Å—Ç—å:\n\n" + text[sum(len(p) for p in parts[:i]):][:len(part)]
            )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_name = update.effective_user.first_name
    welcome_message = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n"
        "–Ø –≤–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
    )
    await update.message.reply_text(welcome_message)


async def handle_text_message(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    user_id = str(update.effective_user.id)
    user_text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {user_id}: '{user_text}'")

    inn_match = re.search(r"(\b\d{10}\b|\b\d{12}\b)", user_text)
    if inn_match:
        await update.message.reply_text(
            "üîé –ù–∞—á–∏–Ω–∞—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ."
        )

    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, action=constants.ChatAction.TYPING
    )

    response_text = await dialogue_manager.handle_message(user_id, user_text)

    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: '{response_text[:120]}...'")
    await send_long_message(update, context, response_text)


def run_bot() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    # application.add_error_handler(error_handler) # –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é error_handler
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message)
    )
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling()


if __name__ == "__main__":
    run_bot()